generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName        String  @map("first_name")
  lastName         String  @map("last_name")
  passwordHash     String  @map("password_hash")
  email            String  @unique
  role             Role    @default(CUSTOMER)
  hasResetPassword Boolean @default(false) @map("has_reset_password")

  orders Order[]
  sales  Sale[]

  inventory   Inventory? @relation(fields: [inventoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inventoryId String?    @map("inventory_id") @db.ObjectId
  supplierId  String?    @db.ObjectId

  @@map("user")
}

model Inventory {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  slug  String @unique
  image String

  users User[]
  items InventoryItem[]

  @@map("inventory")
}

model Supplier {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String?
  image       String
  slug        String  @unique

  items Item[]

  @@map("supplier")
}

model Item {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String
  slug        String  @unique
  price       Float
  quantity    Int

  orderIds ItemOrder[]

  suppplier  Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  supplierId String   @map("supplierId") @db.ObjectId

  @@map("item")
}

model Order {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime    @default(now()) @map("created_at")
  invoice        Invoice?
  status         OrderStatus
  originalAmount Float       @map("original_amount")
  quotedAmount   Float       @map("quoted_amount")
  paymentPending Boolean     @default(false)

  items ItemOrder[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @map("user_id") @db.ObjectId

  @@map("order")
}

model Sale {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime     @default(now()) @map("created_at")
  invoice   SaleInvoice?
  status    OrderStatus
  feedback  String?

  items InventoryItemSale[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @map("user_id") @db.ObjectId

  @@map("sale")
}

model Invoice {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime      @default(now()) @map("created_at")
  amount        Float
  paymentMethod PaymentMethod @default(CREDIT_CARD) @map("payment_method")
  totalAmount   Float         @map("total_amount")

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String @unique @map("order_id") @db.ObjectId

  @@map("invoice")
}

model SaleInvoice {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime      @default(now()) @map("created_at")
  amount        Float
  paymentMethod PaymentMethod @default(CREDIT_CARD) @map("payment_method")
  totalAmount   Float         @map("total_amount")

  sale   Sale   @relation(fields: [saleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  saleId String @unique @map("sale_id") @db.ObjectId

  @@map("sale_invoice")
}

model ItemOrder {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int

  item    Item   @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId  String @map("item_id") @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String @map("order_id") @db.ObjectId

  @@unique([itemId, orderId])
  @@map("item_order")
}

model InventoryItemSale {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int

  item   InventoryItem @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId String        @map("item_id") @db.ObjectId
  sale   Sale          @relation(fields: [saleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  saleId String        @map("order_id") @db.ObjectId

  @@unique([itemId, saleId])
  @@map("inventory_item_sale")
}

model InventoryItem {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String
  slug        String  @unique
  price       Float
  quantity    Int

  saleIds InventoryItemSale[]

  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inventoryId String    @map("inventory_id") @db.ObjectId

  @@map("inventory_item")
}

enum OrderStatus {
  SUCCESS
  REJECTED
  PENDING
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
}

enum Role {
  ADMIN
  CUSTOMER
  STAFF
  STORE_MANAGER
}
